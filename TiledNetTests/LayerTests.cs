using TiledNet.Enums;
using TiledNet.Models;
using TiledNet.Models.Layers;

namespace TiledNetTests;

public class LayerTests
{
    /// <summary>
    /// Tests the elements inside of a layer tag, a realistic scenario generated by Tiled
    /// </summary>
    [Test]
    public void TestLegitLayerElements()
    {
        TiledMap map = MapStringParser.LoadMapFromString("""
        <map>
            <layer id="2" name="Tile Layer 1" width="8" height="8">
            	<data encoding="csv">
            		3,3,3,3,3,3,3,3,
            		3,3,3,3,3,3,3,3,
            		3,3,3,3,3,3,3,3,
            		3,3,3,3,3,3,3,3,
            		3,3,3,3,3,3,3,3,
            		3,3,3,3,3,3,3,3,
            	    3,3,3,3,3,3,3,3,
            		3,3,3,3,3,3,3,3
            	</data>
            </layer>
            <layer id="3" name="Tile Layer 2" width="8" height="8">
            	<data encoding="csv">
            		0,0,0,0,0,0,0,0,
            		0,0,0,0,0,0,0,0,
            		0,0,0,0,0,0,0,0,
            		0,0,0,0,0,0,0,0,
            		0,0,0,0,0,0,0,0,
            		0,0,0,0,0,0,0,0,
            		0,0,0,0,0,0,0,0,
            		0,0,0,0,0,0,0,0
            	</data>
            </layer>
        </map>
        """);
        foreach (TileLayer tileLayer in map.TileLayers)
        {
            Assert.Multiple(() =>
            {
                Assert.That(tileLayer.Id, Is.EqualTo(2).Or.EqualTo(3));
                Assert.That(tileLayer.Name, Does.StartWith("Tile Layer "));
                Assert.That(tileLayer.Width, Is.EqualTo(8));
                Assert.That(tileLayer.Height, Is.EqualTo(8));
                Assert.That(tileLayer.Data.DataEncodingType, Is.EqualTo(DataEncodingType.Csv));
                Assert.That(tileLayer.Data.DataCompressionType, Is.EqualTo(DataCompressionType.Undefined));
                Assert.That(tileLayer.Data.ConvertRawTileData(), Has.Length.EqualTo(64));
            });
        }
    }
}