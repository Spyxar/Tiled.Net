using TiledNet.Enums;
using TiledNet.Models;

namespace TiledNetTests;

public class TilesetTests
{
    /// <summary>
    /// Tests the attributes of a tileset tag, in a realistic scenario generated by Tiled
    /// </summary>
    [Test]
    public void TestLegitTilesetAttributes()
    {
        TiledMap map = MapStringParser.LoadMapFromString("""
        <map>
            <tileset firstgid="1" name="ColoredTiles" tilewidth="16" tileheight="16" tilecount="4" columns="2"></tileset>
            <tileset firstgid="2" name="ColorTiles" tilewidth="32" tileheight="32" tilecount="8" columns="4"/>
        </map>
        """);
        Assert.That(map.Tilesets, Has.Count.EqualTo(2));
        foreach (Tileset tileset in map.Tilesets)
        {
            Assert.Multiple(() =>
            {
                Assert.That(tileset.FirstGid, Is.EqualTo(1).Or.EqualTo(2));
                Assert.That(tileset.Name, Is.EqualTo("ColoredTiles").Or.EqualTo("ColorTiles"));
                Assert.That(tileset.TileWidth, Is.EqualTo(16).Or.EqualTo(32));
                Assert.That(tileset.TileHeight, Is.EqualTo(16).Or.EqualTo(32));
                Assert.That(tileset.TileCount, Is.EqualTo(4).Or.EqualTo(8));
                Assert.That(tileset.Columns, Is.EqualTo(2).Or.EqualTo(4));
            });
        }
    }

    /// <summary>
    /// Tests all attributes that a tileset could ever have, this is a theoretical scenario
    /// </summary>
    [Test]
    public void TestAllPossibleTilesetAttributes()
    {
        TiledMap map = MapStringParser.LoadMapFromString("""
        <map>
            <tileset firstgid="1" source="testsource" class="testclass" name="ColoredTiles" tilewidth="16" tileheight="16"
            spacing="7" margin="5" tilecount="4" columns="2"
            objectalignment="top" tilerendersize="grid" fillmode="preserve-aspect-fit" />
        </map>
        """);
        foreach (Tileset tileset in map.Tilesets)
        {
            Assert.Multiple(() =>
            {
                Assert.That(tileset.FirstGid, Is.EqualTo(1));
                Assert.That(tileset.Source, Is.EqualTo("testsource"));
                Assert.That(tileset.Name, Is.EqualTo("ColoredTiles"));
                Assert.That(tileset.Class, Is.EqualTo("testclass"));
                Assert.That(tileset.TileWidth, Is.EqualTo(16));
                Assert.That(tileset.TileHeight, Is.EqualTo(16));
                Assert.That(tileset.Spacing, Is.EqualTo(7));
                Assert.That(tileset.Margin, Is.EqualTo(5));
                Assert.That(tileset.TileCount, Is.EqualTo(4));
                Assert.That(tileset.Columns, Is.EqualTo(2));
                Assert.That(tileset.ObjectAlignment, Is.EqualTo(TilesetObjectAlignment.Top));
                Assert.That(tileset.TileRenderSize, Is.EqualTo(TileRenderSize.Grid));
                Assert.That(tileset.TilesetFillMode, Is.EqualTo(TilesetFillMode.PreserveAspectFit));
            });
        }
    }

    /// <summary>
    /// Tests the GetTilesetByTileGid method on a legit sample
    /// </summary>
    [Test]
    public void TestLegitGetTilesetByTileGid()
    {
        TiledMap map = MapStringParser.LoadMapFromString("""
        <map>
            <tileset firstgid="1" name="ColoredTiles" tilewidth="16" tileheight="16" tilecount="4" columns="2"></tileset>
            <tileset firstgid="2" name="ColorTiles" tilewidth="32" tileheight="32" tilecount="8" columns="4"/>
        </map>
        """);
        Assert.Multiple(() =>
        {
            Assert.That(map.Tilesets, Is.Not.Null);
            Assert.That(map.GetTilesetByTileGid(0), Is.EqualTo(null));
            Assert.That(map.GetTilesetByTileGid(4), Is.EqualTo(map.Tilesets[0]));
            Assert.That(map.GetTilesetByTileGid(5), Is.EqualTo(map.Tilesets[1]));
            Assert.That(map.GetTilesetByTileGid(12), Is.EqualTo(map.Tilesets[1]));
            Assert.That(map.GetTilesetByTileGid(13), Is.EqualTo(null));
        });
    }
}